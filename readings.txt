=============================================

    这个文件收藏了我自己阅读过的链接

    Annotation Explained:
        ! high value resource
        - low value (should i remove it ?)


=============================================
# BLOGS
    [node weekly](http://nodeweekly.com/issues)
    [programming tips](https://coderwall.com/)
    [lihaoyi blog](http://www.lihaoyi.com/)
    [](https://www.smashingmagazine.com/)
    [](http://sourcey.com/archives/)

    ## JS
        [](https://scotch.io/tutorials/the-many-ways-to-use-ngclass)
        [NODEJS](http://www.bennadel.com/)
        [scotch io](https://scotch.io/)

# Design Resource

    https://dribbble.com/hzlzh/projects/380016-WeFlow
    [产品之器・ Sketch](https://zhuanlan.zhihu.com/p/21386019)

# Security & Hacks
    [](https://breakdev.org/how-i-hacked-an-android-app-to-get-free-beer/)


# web
    [2016/2017 MUST-KNOW WEB DEVELOPMENT TECH](https://www.youtube.com/watch?v=sBzRwzY7G-k)
    [Journey to HTTP/2](http://kamranahmed.info/blog/2016/08/13/http-in-depth/?utm_source=mybridge&utm_medium=email&utm_campaign=read_more)


    ## front
        [shadow dom](http://www.html5rocks.com/zh/tutorials/webcomponents/shadowdom/)

        [js  异步文件上传](http://stackoverflow.com/questions/166221/how-can-i-upload-files-asynchronously)
        [文件上传命名](http://programmers.stackexchange.com/questions/193834/whats-the-best-practice-for-naming-uploaded-images)

        [awesome-frontend](https://github.com/JingwenTian/awesome-frontend)
        [移动端网络优化](http://www.trinea.cn/android/mobile-performance-optimization/)
        [前段手册]https://dwqs.gitbooks.io/frontenddevhandbook/content/learning/dns.html

        [SVG图标在移动端的应用](http://ued.ctrip.com/blog/?p=3893)

        [前段代码加密](http://div.io/topic/1220)

        ### perspective
            [2015 前端[JS]工程师必知必会](http://zhuanlan.zhihu.com/FrontendMagazine/20002850)
            [近几年前端技术盘点以及 2016 年技术发展方向](http://www.barretlee.com/blog/2015/12/10/after-framework-we-gonna-to-hug-data/)
            [2015前端生态发展回顾 ](https://github.com/kuitos/kuitos.github.io/issues/32)
            [2015年末必备前端工具集](http://zxc0328.github.io/2015/12/28/2015-javascript-tools/)

            [前端开发工程师如何在2013年里提升自己](http://oklai.name/2012/12/%E8%BD%AC%E8%BD%BD%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E5%9C%A82013%E5%B9%B4%E9%87%8C%E6%8F%90%E5%8D%87%E8%87%AA%E5%B7%B1/)
            !! [State of the Art JavaScript in 2016](https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.cxd4lhuhi)

        ### Resources
            [web项目下载 后台模板](http://www.jqueryfuns.com/)
            [free ui resources](http://www.graphberry.com/)
            [每个设计师必知的40个设计素材站](http://www.uisdc.com/40-resources-designer-should-know)

        ###  bootstrap

            [Best Bootstrap UI Editors for Developers](http://codegeekz.com/best-bootstrap-ui-editors-for-developers/)
            [bootstrap grid system, difference within col-lg col-md col-sm](http://stackoverflow.com/questions/19865158/what-is-the-difference-among-col-lg-col-md-and-col-sm-in-twitter-bootstra)

        ### CSS
            ! [ How To Keep Your Footer At The Bottom Of The Page With CSS](http://cssreset.com/how-to-keep-footer-at-bottom-of-page-with-css/)
            [2d 转换和 3d转换详解](http://blog.csdn.net/xiaoguang44/article/details/8275396)
            [vertical-align] http://phrogz.net/CSS/vertical-align/index.html
            [Flex 布局教程：实例篇](http://www.ruanyifeng.com/blog/2015/07/flex-examples.html)
            [flex box](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)
                [flex-basis 0 vs auto](http://www.w3.org/TR/css3-flexbox/images/rel-vs-abs-flex.svg)
                [flex-basis demo](http://codepen.io/HugoGiraudel/pen/qIAwr)
            ! [guide to flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)

            [web 学习博客](http://www.w3cplus.com/blogs/list.html)
            [center things](https://css-tricks.com/centering-css-complete-guide/)

            ! [CSS Modules 详解及 React 中实践](http://zhuanlan.zhihu.com/purerender/20495964)
                https://github.com/css-modules/icss

            ! [第二天，谈谈【line-height】](http://www.html-js.com/article/A-day-to-learn-CSS-and-on-the-second-day-talk-about-lineheight)

            [svg]
                http://www.w3cplus.com/svg/svg-fill-stroke.html

            [animate 动画]
                [css-animation-for-beginners](https://robots.thoughtbot.com/css-animation-for-beginners)
                [css translate3d](http://www.w3cplus.com/css3/css3-3d-transform.html)
                [keyframe-animation-syntax](https://css-tricks.com/snippets/css/keyframe-animation-syntax/)
                [A Guide to Browser Scroll Animations](http://developer.telerik.com/featured/guide-browser-scroll-animations/?utm_source=mybridge&utm_medium=email&utm_campaign=read_more)

            libs
                animate
                    http://daneden.github.io/animate.css/
                    http://info.9iphp.com/top-9-animation-libraries-use-2016/



            [icons]
                http://www.iconfont.cn/collections?personal=1

            !! [the responsive web]
                ! viewports fundementals
                    [A tale of two viewports — part one](http://www.quirksmode.org/mobile/viewports.html)
                    [A tale of two viewports — part two](http://www.quirksmode.org/mobile/viewports2.html)
                    [meta view port](http://www.quirksmode.org/mobile/metaviewport/)
                    [A pixel is not a pixel is not a pixel](http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html)
                [走向视网膜（Retina）的Web时代](http://www.w3cplus.com/css/towards-retina-web.html)




        ### mobile html5
            [webview 调试]https://github.com/riskers/blog/issues/11
            [](http://www.smashingmagazine.com/2013/04/build-fast-loading-mobile-website/)

            移动端适配:
                ![移动端高清、多屏适配方案](http://div.io/topic/1092)
                [移动端适配方案(下)](https://github.com/riskers/blog/issues/18)
                ![前端H5适配 ](https://github.com/amfe/article/issues/17)


        ### svgs
            http://qianduan.guru/2016/04/17/How-to-work-with-SVG-icons/


        ### JS
            ! [Philip Roberts: What the heck is the event loop anyway?](https://www.youtube.com/watch?v=8aGhZQkoFbQ)
            ! [requestAnimationFrame](http://creativejs.com/resources/requestanimationframe/)
            [offsetwidth, scrollwidth, clientwidth..](http://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively)

            [detect javascript memory leak with chrome dev tools]
                [google official explaination] (https://developer.chrome.com/devtools/docs/javascript-memory-profiling)
                [javascript memory leak pattern] (http://www.ibm.com/developerworks/web/library/wa-memleak/?S_TACT=105AGX52&S_CMP=cn-a-wa)
                http://www.slideshare.net/gonzaloruizdevilla/finding-and-debugging-memory-leaks-in-javascript-with-chrome-devtools
                http://javascript.info/tutorial/memory-leaks

            [JS 优化]
                http://coding.smashingmagazine.com/2012/06/12/javascript-profiling-chrome-developer-tools/
                http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/

            libaries

                react
                    !! [redux vedio tutorial](https://egghead.io/series/getting-started-with-redux)


                    Flux Pattern
                        [Flux 傻瓜教程](http://zhuanlan.zhihu.com/FrontendMagazine/19900243#!)
                        http://facebook.github.io/flux/docs/overview.html#content
                        [react flux](http://www.infoq.com/cn/articles/react-flux)

                    reactjs
                        [颠覆式前端UI开发框架：React](http://www.infoq.com/cn/articles/subversion-front-end-ui-development-framework-react)
                        [深入浅出 React Native：使用 JavaScript 构建原生应用](http://zhuanlan.zhihu.com/FrontendMagazine/19996445)
                        http://www.tabforacause.org/blog/2015/01/29/using-reactjs-and-application-cache-fast-synced-app/
                        [谈谈React.js的核心入门知识](http://wwsun.me/posts/react-getting-started.html)
                        [React.js Best Practices for 2016](https://blog.risingstack.com/react-js-best-practices-for-2016/)

                        react component
                            http://react-components.com/




        ### scalajs
            [! introduction to scalajs, the next generation of the FE](https://www.youtube.com/watch?v=n1GgVWOThhY)

        ### angularjs
            [A high level look at Angular 2](http://www.developerhandbook.com/angular/high-level-look-angular-2/)
            [zone.js introduction](https://www.youtube.com/watch?v=3IqtmUscE_U)




        ### blogs
            http://pinggod.com/


        ### others
            [chrome dev tools](http://ljinkai.github.io/2015/12/26/chrome-dev-tools/)
            [CDN缓存那些事](https://www.qcloud.com/doc/product/228/CDN%E7%BC%93%E5%AD%98%E9%82%A3%E4%BA%9B%E4%BA%8B)
            [浅谈 WebVR](https://aotu.io/notes/2016/08/24/2016-8-24-webvr/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)

            #### Grid system
                https://github.com/amfe/lib-flexible
                [网页的栅格系统设计](http://ued.taobao.org/blog/2008/09/grid_systems/)
                ! [Bootstrap 栅格系统的精妙之处](http://segmentfault.com/a/1190000000743553)

        ### workflow
            [如何 10 倍提高你的 Webpack 构建效率](http://eternalsky.me/ru-he-10-bei-ti-gao-ni-de-webpack-gou-jian-xiao-lu/)

        ### tools
            [css animate]
                http://cssanimate.com/


        ### webgl & three.js

            [webGL fundemantals](http://webglfundamentals.org/)
            [The Future of WebGL and Gaming](https://www.youtube.com/watch?v=6lnEmAYVziA)

            ### three.js
              [Ricardo Cabello (Mr doob) - 5 years of three.js](https://www.youtube.com/watch?v=57P8julAaRE)

        ### performance
            [](https://css-tricks.com/case-study-boosting-front-end-performance/?utm_source=mybridge&utm_medium=email&utm_campaign=read_more)
    ## backend
        [Nginx、LVS及HAProxy负载均衡软件的优缺点详解](http://www.csdn.net/article/2014-07-24/2820837)
        [Worktile中的实时消息推送服务实现](https://worktile.com/tech/basic/worktile-real-time-notice)

        [centos haproxy install]
            http://www.centoscn.com/image-text/config/2013/0805/1056.html
            http://www.serverlab.ca/tutorials/linux/network-services/deploying-an-haproxy-load-balancer-on-centos-6/
            http://www.rackspace.com/knowledge_center/article/setting-up-haproxy
            http://virtuallyhyper.com/2013/05/configure-haproxy-to-load-balance-sites-with-ssl/

        [缓存]
            [Web应用的缓存设计模式] (http://robbinfan.com/blog/38/orm-cache-sumup)

            ### redis
                [redis mysql haproxy 快速架构](http://www.oschina.net/translate/the-easy-way-of-building-a-growing-startup-architecture)

        ## HTTPS:
            [Mozilla SSL Config Center](https://mozilla.github.io/server-side-tls/ssl-config-generator/)
            [! 关于启用 HTTPS 的一些经验分享](https://imququ.com/post/sth-about-switch-to-https.html)
            [! 免费签发证书](https://letsencrypt.org/)
            [正向代理与反向代理的区别](http://bigc.at/reverse-proxy.orz)
            [HTTPS的七个误解](http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html)
            [HTTPS 证书申请] (http://www.startssl.com/)
            [haproxy https]
                http://seanmcgary.com/posts/using-sslhttps-with-haproxy
                https://www.digitalocean.com/community/tutorials/how-to-implement-ssl-termination-with-haproxy-on-ubuntu-14-04
            [https resin 的安装使用](http://www.itrus.cn/html/fuwuyuzhichi/fuwuqizhengshuanzhuangpeizhizhinan/428.html)
                不建议,一般网站都有反向代理，https加载反向代理那一层比较好
                http://nginx.org/cn/docs/http/configuring_https_servers.html
                http://jingyan.baidu.com/article/a948d6515d3e850a2dcd2ee6.html
                http://hi.baidu.com/seo_site/item/3c3bf21bf02d56436926bb34
            [switch to https](https://konklone.com/post/switch-to-https-now-for-free)

            [一些安全相关的HTTP响应头](https://www.imququ.com/post/web-security-and-response-header.html)
            [apache traffic server - 文件缓存](http://trafficserver.apache.org/)

            ! [wireshark in https]
                [wireshare 分析 https 协议]
                    https://www.centos.bz/2015/12/why-wireshark-can-not-decrypt-https-data/
                    https://imququ.com/post/http2-traffic-in-wireshark.html


        ### web crawling
            [selenium]
            [PhantomJS]
            ! [The Ultimate Introduction to Web Scraping and Browser Automation](https://www.youtube.com/watch?v=1UYBAn69Qrk)

        ### web service
            [撰写合格的REST API](http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&mid=208060670&idx=1&sn=ce67b8896985e8448137052b338093e0)
            [一些REST最佳实践](http://weibo.com/p/1001603873537160306692)
            [Token-Based Authentication With AngularJS & NodeJS](http://code.tutsplus.com/tutorials/token-based-authentication-with-angularjs-nodejs--cms-22543)
                with same question to be resolved: 1. it doesnt make sense to decrypt jwt token on client side, 2. /me api is broken, see comments below. 3. is base64 is really needed.
                1. 问题已经解决.  阅读下面 JWT 一节的链接和开源的一个简单实现


            [http api guide]
                https://geemus.gitbooks.io/http-api-design/content/
                ！https://github.com/ZhangBohan/http-api-design-ZH_CN
                ！https://devcenter.heroku.com/articles/platform-api-reference#ranges

                后端 支持Etag缓存 策略

            ! [How to build a REST API with Akka Http](https://danielasfregola.com/2016/02/07/how-to-build-a-rest-api-with-akka-http/)


        ### database

            ! [cap theorem](http://en.wikipedia.org/wiki/CAP_theorem)

            [The problem with Backing Stores, or what is NoSQL and why would you use it anyway](http://blog.isotoma.com/2014/06/the-problem-with-backing-stores-or-what-is-nosql-and-why-would-you-use-it-anyway/)
            [分布式系统的事务处理](http://coolshell.cn/articles/10910.html)

            oracle database:
                [security]
                    [project lockdown](http://www.oracle.com/technetwork/articles/project-lockdown-133916.pdf)

            redis:
                [Redis 集群的合纵与连横](https://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&mid=402004912&idx=1&sn=7517696a86f54262e60e1b5636d6cbe0)

            ! [Why CouchDB](http://guide.couchdb.org/draft/why.html)

        ### network
            # TCP/IP
                http://coolshell.cn/articles/11564.html
                http://coolshell.cn/articles/11609.html

        ### J2EE
            [服务端工程师入门与进阶 Java 版](http://xielong.me/2015/04/16/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%85%A5%E9%97%A8%E4%B8%8E%E8%BF%9B%E9%98%B6Java%E7%89%88/)
            struts2
                [struts2 and freemarker](http://viralpatel.net/blogs/struts2-freemarker-tempalte-ftl-integration-example/)

            hibernate

            security
                [Java security: Java security, Part 1: Crypto basics](http://www.ibm.com/developerworks/java/tutorials/j-sec1/j-sec1.html#padding)


        ### docker
            [Containers (Docker): A disruptive force in cloud computing](http://anandmanisankar.com/posts/container-docker-PaaS-microservices/)
            [在 Docker 中完整部署 Web 应用](http://fuzhii.com/2015/12/25/docker-web-app/)
                docker file 写的并不是特别规范, mysql 最好用 docker compose 来做, 方便扩容
            [](http://developerblog.redhat.com/2016/02/24/10-things-to-avoid-in-docker-containers/)
            [David Blurton: Full-stack JavaScript development with Docker - JSConf Iceland 2016](https://www.youtube.com/watch?v=zcSbOl8DYXM)

        ### NodeJS
            [](https://blog.risingstack.com/nodejs-production-environment-for-startups/)


        ### encrptions
            [](http://security.stackexchange.com/questions/20129/how-and-when-do-i-use-hmac)
                 You use HMAC whenever you want integrity of the data maintained (and authenticity)
            https://en.wikipedia.org/wiki/Hash-based_message_authentication_code#Design_principles



        ### others
            [自己动手开发网络服务器（三）](http://codingpy.com/article/build-a-simple-web-server-part-three/)
                python fork 会复制文件描述符, 子进程需要及时关闭从父进程copy过来的 file descriptor
                父进程需要等待子进程的关闭(os.wait, os.waitpid), 否则会出现僵尸进程
                    > 僵尸进程其实是已经结束了的进程，但是它的父进程并没有等待进程结束，所以没有接收到进程结束的状态信息。当子进程在父进程之前退出，系统就会将子进程变成一个僵尸进程，保留原子进程的部分信息，方便父进程之后获取。系统所保留的信息通常包括进程ID、进程结束状态和进程的资源使用情况。
                ulimit 查看系统进程默认可以使用的资源
                python signal 处理可能会引起的主进程的 interrupted error.
                进程 pid 和 ppid 的关系, 子进程创建会有一个 ppid 指向父进程

            [Json Web Token (JWT)]
                ! [使用JWT](http://haomou.net/2014/08/13/2014_web_token/)
                [JWT introduction](https://jwt.io/introduction/)
                [node simple jwt implemetation](https://github.com/hokaccha/node-jwt-simple/blob/master/lib/jwt.js)


# Operating System

    [locale的设定及LANG、LC_CTYPE、LC_ALL环境变量](http://www.cnblogs.com/xlmeng1988/archive/2013/01/16/locale.html)

# Tools

    IDEA
        http://laobie.github.io/android/2016/02/14/android-studio-tips.html

    [wire shark]
        http://fangxin.blog.51cto.com/1125131/735178
        http://www.cnblogs.com/TankXiao/archive/2012/10/10/2711777.html


# version control
    ## git
        [undo-the-last-git-commit] http://stackoverflow.com/questions/927358/undo-the-last-git-commit
        [图解Git](https://marklodato.github.io/visual-git-guide/index-zh-cn.html)
        [atlassian git tutorial](https://www.atlassian.com/git/tutorials/setting-up-a-repository)
        [Git 版本控制与工作流  ](http://www.jianshu.com/p/67afe711c731)
        [让你的Git水平更上一层楼的10个小贴士](http://blog.jobbole.com/75348/)
        [git flow]
            [git-flow 备忘清单](http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html)

        ! [闯过这 54 关，点亮你的 Git 技能树 ](https://codingstyle.cn/topics/181)

# native mobile

    # android
        [anroid 程序设计经验](http://blog.csdn.net/ahence/article/details/47154419)
        [android 技术开发应用堆栈](http://www.jianshu.com/p/c8c6dbe00787)
        [Jenkin+Git+Gradle为Android项目搭建CI环境](http://blogs.cyning.me/2015/08/16/jenkins-CI-android/)
        [移动端前端开发真机调试攻略](http://www.anchengjian.com/post/3217ba_8c8e9f1)
        ! [The Busy Coder's Guide to Android Development](https://github.com/commonsguy/cw-omnibus)
        ! [android 资源列表](http://www.jianshu.com/p/e961f1633d7a)
        ! [android cheetsheet](http://inthecheesefactory.com/aca/The%20Android%20Cheese%20Sheet%20rev%204.pdf)
        [Android Studio插件整理](https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/)


    # hydrid mobile dev
        [cordova](http://cordova.apache.org/)


# thoughts
    [Function Programming]: http://en.wikipedia.org/wiki/Functional_programming

# math
    [数学收敛]http://zh.wikipedia.org/zh/%E6%9E%81%E9%99%90_%28%E6%95%B0%E5%AD%A6%29
    [List of mathematical symbols](https://en.wikipedia.org/wiki/List_of_mathematical_symbols)
    [Function (mathematics)](https://en.wikipedia.org/wiki/Function_(mathematics))
    http://www.ruanyifeng.com/blog/2011/07/mathematical_constant_e.html
    [数学科普文章](http://betterexplained.com/)
    [傅里叶变换]
        http://blog.rainy.im/2015/11/03/fourier-transform-in-image-processing/
        http://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/

# 面试
    [前端]
        https://github.com/AutumnsWind/Front-end-questions-to-the-interview-stage


# linux
    [linux 工具速查手册](1)
      [ulimit](https://www.ibm.com/developerworks/cn/linux/l-cn-ulimit/)
      [cmds]
          nc - http://www.computerhope.com/unix/nc.htm
              用于网络连接测试, tcp, udp, UNIX-domain stream socket, port scanning

    [make file introductions]
      http://www.ruanyifeng.com/blog/2015/03/build-website-with-make.html


# economics
    [经济学书籍推荐]http://mp.weixin.qq.com/s?__biz=MzI4OTEwOTQ3MA==&mid=402562477&idx=1&sn=6cab2420c95317a692f0c96a66b4654f&scene=4#wechat_redirect

# others
    ! [各种 cheatsheet](http://overapi.com/javascript/)

    java 性能优化
        http://item.jd.com/11099999.html
    [程序的本质复杂性和元语言抽象] http://coolshell.cn/articles/10652.html#more-10652

    [正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm)
    [如何选择开源许可证](http://oklai.name/%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%EF%BC%9F/)

    [collaborative filtering recommendation engine implementation in python](http://dataaspirant.com/2015/05/25/collaborative-filtering-recommendation-engine-implementation-in-python/)

    [python 统计入门教程](http://work.thaslwanter.at/Stats/html/)
    [python 科学入门](http://nbviewer.ipython.org/gist/rpmuller/5920182#)
    [python 算法教程](http://interactivepython.org/runestone/static/pythonds/index.html)
    [color in terminal](http://jafrog.com/2013/11/23/colors-in-terminal.html)
    [force-files-to-download-not-open-in-browser](https://css-tricks.com/snippets/htaccess/force-files-to-download-not-open-in-browser/)

    [涉及 工作方面的思想](http://open.leancloud.cn/)

    Reactive Programming:
        [The introduction to Reactive Programming you've been missing](https://gist.github.com/staltz/868e7e9bc2a7b8c1f754)


# music Fundamentals
    [Introduction To Music Theory - Understanding Notes, Major/Minor Keys And Chords - Part 1](https://www.youtube.com/watch?v=RfEx7sEMWd4)

# Functional Programming
    [John Hughes - Why Functional Programming Matters]https://www.youtube.com/watch?v=Z35Tt87pIpg

# PROGRAMMING LANGUAGE
    ## JAVA
        [RESTful Web services: The basics](http://www.ibm.com/developerworks/webservices/library/ws-restful/)
        [Apache ActiveMQ介绍](http://blog.csdn.net/qq7342272/article/details/8585048)

    ## scala
        [Understanding Scala Streams through Fibonacci](http://derekwyatt.org/2011/07/29/understanding-scala-streams-through-fibonacci.html)
        [5 years of Scala and counting – debunking some myths about the language and its environment](http://manuel.bernhardt.io/2015/11/13/5-years-of-scala-and-counting-debunking-some-myths-about-the-language-and-its-environment/)
        [scala 魔法函数](http://colobu.com/2016/01/04/Scala-magic-functions/)
        [The Neophyte's Guide to Scala Part 2: Extracting Sequences](http://danielwestheide.com/blog/2012/11/28/the-neophytes-guide-to-scala-part-2-extracting-sequences.html)
        [A Deep Dive into Scalac — Chris Birchall](https://www.youtube.com/watch?v=2742pWdUm6c)
        [implicit parameter precedence](http://eed3si9n.com/implicit-parameter-precedence-again)

        [scala-partial-functions](http://blog.bruchez.name/2011/10/scala-partial-functions-without-phd.html)
        ! [The Neophyte's Guide to Scala]http://danielwestheide.com/scala/neophytes.html

        [scala type class](http://www.cakesolutions.net/teamblogs/demystifying-implicits-and-typeclasses-in-scala)
            http://danielwestheide.com/blog/2013/02/06/the-neophytes-guide-to-scala-part-12-type-classes.html

        ! scala cake pattern
            http://www.cakesolutions.net/teamblogs/2011/12/19/cake-pattern-in-depth
            https://coderwall.com/p/t_rapw/cake-pattern-in-scala-self-type-annotations-explicitly-typed-self-references-explained

        ! scala style guide
            http://www.lihaoyi.com/post/StrategicScalaStylePrincipleofLeastPower.html


        ! [Functional Programming is Terrible](https://www.youtube.com/watch?v=hzf3hTUKk8U)

        ! [Function Method and eta expression](https://gleichmann.wordpress.com/2011/01/09/functional-scala-turning-methods-into-functions/)


        [scala compiler options](http://pedrorijo.com/blog/scala-compiler-review-code-warnings/)
        ## scalaz
          [scalaz Task](http://timperrett.com/2014/07/20/scalaz-task-the-missing-documentation/)


    ## nodejs
        [nodejs 模块加载机制]
            http://www.infoq.com/cn/articles/nodejs-module-mechanism
        [nodejs 7 tips](http://dev.oupeng.com/articles/7-tips-for-a-nodejs-padawan)
        [深入浅出Nodejs读书笔记](http://tw93.github.io/2015-03-01/shen-ru-qian-chu-nodejs-reading-mind-map.html)
        [node js best practices](http://blog.risingstack.com/node-js-best-practices/)
        [node-best-practices](https://devcenter.heroku.com/articles/node-best-practices#use-npm-scripts-to-run-custom-build-steps)
        [Browserify：浏览器加载Node.js模块](http://javascript.ruanyifeng.com/tool/browserify.html)
        [Gulp思维 —— Gulp高级技巧](http://lingyu.wang/2014/10/07/getting-gulpy/)
        [nodejs streaming](http://ejohn.org/blog/node-js-stream-playground/#postcomment)
        [stream handbook](https://github.com/substack/stream-handbook)
        [详解Node.js的http模块之http模块概述](http://itbilu.com/nodejs/core/N1okQ7Eh.html)
        [npm best practice](https://blog.risingstack.com/nodejs-at-scale-npm-best-practices/)


    ## Python
        [A FEW THINGS TO REMEMBER WHILE CODING IN PYTHON](http://satyajit.ranjeev.in/2012/05/17/python-a-few-things-to-remember.html)

        [python web crawler]
            http://blog.csdn.net/column/details/why-bug.html
            http://www.zhihu.com/question/20899988

        [how to structure large flask application](https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications)
        [Python 语言在企业应用方面遭遇的十大谬误](http://www.oschina.net/translate/10-myths-of-enterprise-python)
        [python 日报](http://py.memect.com/)
        [Python初学者的资源总结](http://www.jianshu.com/p/9a3e1229c810)

    #javascript
        [requirejs] require js [http://www.ruanyifeng.com/blog/2012/11/require_js.html]
        [javascript inheritance]http://javascript.info/tutorial/inheritance
        generators & async/await
            https://ponyfoo.com/articles/es6-generators-in-depth#generators-the-del-weird-del-ins-awesome-ins-parts
            ! [The Evolution of Asynchronous JavaScript](https://blog.risingstack.com/asynchronous-javascript/)
            [async await](https://ponyfoo.com/articles/understanding-javascript-async-await)

    ## Rust
        http://killercup.github.io/trpl-ebook/
        [Rust语言入门、关键技术与实战经验](http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=405037902&idx=1&sn=97d9af490eefc5d6158cb6b6a70f67e5)
        [Zero-cost futures in Rust](http://aturon.github.io/blog/2016/08/11/futures/)
        [The Rust Programming Language](https://www.youtube.com/watch?v=d1uraoHM8Gg)

        Language itself:
          [](https://blog.rust-lang.org/2015/05/11/traits.html)

        [A Critique of Rust's `std::collections`](http://ticki.github.io/blog/horrible/)


    ## Programming Methology
        [Replacing_Recursion_With_a_Stack](http://haacked.com/archive/2007/03/04/Replacing_Recursion_With_a_Stack.aspx/)
            Any recursive algorithm can be replaced with a non-recursive algorithm by using a Stack.


    ## golang
        [go by example](https://gobyexample.com/)


# TODOs
    DONE:
        [TCP/IP] http://coolshell.cn/articles/11564.html
    DONE:
        ![Java 下一代: 混入和特征]
            https://www.ibm.com/developerworks/cn/views/global/libraryview.jsp?sort_by=&show_abstract=true&show_all=&search_flag=&contentarea_by=Java+technology&search_by=Java+%E4%B8%8B%E4%B8%80%E4%BB%A3&product_by=-1&topic_by=-1&type_by=%E6%89%80%E6%9C%89%E7%B1%BB%E5%88%AB&ibm-search=%E6%90%9C%E7%B4%A2
            (http://www.ibm.com/developerworks/cn/java/j-jn8/index.html)
    PENDING:
        [understand tcp performance](http://apmblog.compuware.com/2014/06/26/understanding-application-performance-on-the-network-tcp-slow-start/)

        [redis-java](http://www.ibm.com/developerworks/java/library/j-javadev2-22/index.html)

        [IBM - Neal Ford- talks about java](http://www.ibm.com/developerworks/cn/views/java/libraryview.jsp?sort_by=&show_abstract=true&show_all=&search_flag=&contentarea_by=Java+technology&search_by=Neal+Ford&topic_by=-1&type_by=%E6%89%80%E6%9C%89%E7%B1%BB%E5%88%AB&ibm-search=%E6%90%9C%E7%B4%A2)

        Css
            http://code.tutsplus.com/tutorials/build-a-twitter-clone-from-scratch-the-design--net-28438
            http://code.tutsplus.com/tutorials/diving-into-css-regions--net-25061
            http://code.tutsplus.com/tutorials/real-world-off-line-data-storage--net-34063
            http://tv.sohu.com/20140509/n399347042.shtml

        [reactive programming]
            https://class.coursera.org/reactive-001
            http://www.infoq.com/cn/articles/functional-reactive-programming
            https://gist.github.com/staltz/868e7e9bc2a7b8c1f754

        key book: a programmer's view: network section

        python
            [python flask, get flask up running on ubuntu]
                http://conra.dk/2012/05/06/flask-uwsgi-nginx-ubuntu.html
                https://www.digitalocean.com/community/tutorials/how-to-deploy-flask-web-applications-using-uwsgi-behind-nginx-on-centos-6-4

            python functional programming
                    https://docs.python.org/dev/howto/functional.html

        [lucene]
            http://blog.imaginea.com/understanding-lucene-boosting-part-1/

        upcomming week
            [java optimazation]http://java.dzone.com/articles/dzones-200th-refcard-released
            [functional programming](http://www.defmacro.org/ramblings/fp.html)
            [](https://www.digitalocean.com/community/tutorials/5-common-server-setups-for-your-web-application)
            http://java.dzone.com/articles/best-dzone-july-29-august-5
            http://code.tutsplus.com/tutorials/easily-deploy-redis-backed-web-apps-with-docker--cms-20405

            http://webdesign.tutsplus.com/tutorials/designing-a-simple-instagram-based-portfolio-in-photoshop--cms-21402

            [linux net cmds]
                http://linux.vbird.org/linux_server/0140networkcommand.php
                http://linux.vbird.org/linux_server/0110network_basic.php#tcpip_link_csmacd
                http://chrinux.blog.51cto.com/6466723/1188108

            [java tree map implementation] (http://blog.csdn.net/SpeedMe/article/details/22661671)

            [spark]
                http://sparkjava.com/documentation.html#views-templates

            [gradle]
                http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html

            http://en.wikipedia.org/wiki/Bloom_filter#Examples
